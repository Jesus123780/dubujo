{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","firsCambas","useRef","secondCambas","onClick","data","current","getSaveData","console","log","loadSaveData","clear","class","undo","brushRadius","brushColor","loadTimeOffset","border","ref","hideGrid","canvasWidth","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2OAoFeA,MAlFf,WAAgB,IAAD,EAGPC,EAAaC,iBAAO,MACpBC,EAAeD,iBAAO,MAiB5B,OAEA,6BACG,4BAAQE,QAjBQ,WAChB,IAAMC,EAAOJ,EAAWK,QAAQC,cACjCC,QAAQC,IAAIJ,GACZF,EAAaG,QAAQI,aAAaL,GAElCG,QAAQC,IAAI,+BAYX,YAGJ,4BAAQL,QAZO,WACZH,EAAWK,QAAQK,UAWtB,WAKA,4BAAQC,MAAM,QAAQR,QAdR,WACXH,EAAWK,QAAQO,SAatB,UAQG,kBAAC,KAAD,GAAYC,YAAa,EACrBC,WAAY,MAEZC,eAAgB,OAHpB,4BAIgB,KAJhB,4BAKiB,SALjB,sBAMW,CAACC,OAAO,oBANnB,4BAOgB,IAPhB,uBAQY,YARZ,oBASShB,GATT,IA6BA,kBAAC,IAAD,CAECiB,IAAKf,EACNgB,UAAU,EACVC,YAAa,QACXC,SAAS,WChEKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.828ba025.chunk.js","sourcesContent":["import React, {useRef} from 'react';\nimport CanvasDraw from \"react-canvas-draw\"\nfunction App() {\n\n   \n  const firsCambas = useRef(null);\n  const secondCambas = useRef(null)\n\n\n  const handleClik = () => {\n     const data = firsCambas.current.getSaveData();\n    console.log(data)\n    secondCambas.current.loadSaveData(data);\n\n    console.log('lo has logrado maldito xd')\n\n  }\n  const clear = () =>{\n    firsCambas.current.clear();\n  }\n  const undo = () =>{\n    firsCambas.current.undo();\n  }\n  return (\n    \n  <div>\n     <button onClick={handleClik}>\n   Magia!!!\n   </button>\n <button onClick={clear}>\n   Limpiar\n   \n </button>\n\n <button class='boton' onClick={undo}>\n  Volver\n </button>\n\n\n\n \n \n    <CanvasDraw brushRadius={6}\n        brushColor= \"red\"\n        \n        loadTimeOffset= '100'\n        brushRadius='1'\n        canvasWidth= '900px'\n        style={{border:'1px solid black'}}  \n        getSaveData=''\n        imgSrc= \"logo.svg\"  \n        ref={firsCambas}\n        \n        /*\n    loadTimeOffset= '7'\n    lazyRadius='30'\n    brushRadius='12'\n    brushColor= \"#444\"\n    catenaryColor= \"#0a0302\"\n    gridColor= \"rgba(150,150,150,0.17)\"\n    hideGrid='false'\n    canvasWidth= '400'\n    canvasHeight= '400'\n    disabled='false' \n    imgSrc= \"\"\n    saveData= 'null'\n    immediateLoading='false' \n    hideInterface='false' \n     */\n    />\n    \n    <CanvasDraw \n    \n     ref={secondCambas}\n    hideGrid={true} \n    canvasWidth= '900px'\n      disabled='true'\n    />\n\n    \n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}